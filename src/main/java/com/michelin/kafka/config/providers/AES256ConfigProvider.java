/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.michelin.kafka.config.providers;

import org.apache.kafka.common.config.ConfigData;
import org.apache.kafka.common.config.ConfigDef;
import org.apache.kafka.common.config.ConfigException;
import org.apache.kafka.common.config.provider.ConfigProvider;
import org.apache.kafka.common.config.types.Password;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.spec.KeySpec;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class AES256ConfigProvider implements ConfigProvider {

    public static final String OVERVIEW_DOC = "A ConfigProvider to decode values encoded with AES256 key.";

    private static final String AES_KEY_CONFIG = "key";
    private static final String SALT_CONFIG = "salt";
    public static final ConfigDef CONFIG_DEF = new ConfigDef()
            .define(AES_KEY_CONFIG, ConfigDef.Type.PASSWORD, ConfigDef.NO_DEFAULT_VALUE,
                    new ConfigDef.NonNullValidator(), ConfigDef.Importance.HIGH,
                    "The AES256 key.")
            .define(SALT_CONFIG, ConfigDef.Type.STRING, ConfigDef.NO_DEFAULT_VALUE,
                    new ConfigDef.NonEmptyString(), ConfigDef.Importance.HIGH,
                    "The AES256 salt.");

    /**
     * Represents the aes256 key
     */
    private Password aesKey;

    /**
     * Represents the aes256 salt
     */
    private String salt;

    @Override
    public void configure(Map<String, ?> configs) {
        Map<String, Object> parsedConfigs = CONFIG_DEF.parse(configs);
        this.aesKey = (Password) parsedConfigs.get(AES_KEY_CONFIG);
        this.salt = parsedConfigs.get(SALT_CONFIG).toString();
    }

    @Override
    public ConfigData get(String path) {
        return new ConfigData(new HashMap<>());
    }

    @Override
    public ConfigData get(String path, Set<String> keys) {
        Map<String, String> decoded = new HashMap<>();

        final Cipher cipher = this.getCipher();
        keys.forEach(key -> {
            try {
                decoded.put(key, new String(cipher.doFinal(Base64.getDecoder().decode(key))));
            } catch (Exception e) {
                throw new ConfigException("Error while decrypting " + key, e);
            }
        });

        return new ConfigData(decoded);
    }

    @Override
    public void close() {
        // nothing to destroy while closing the config provider.
    }

    /**
     * Gets the cipher instance for decryption.
     *
     * @return The cipher used to decrypt the keys.
     */
    private Cipher getCipher() {
        try {
            byte[] iv = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            final IvParameterSpec ivspec = new IvParameterSpec(iv);

            final SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
            final KeySpec spec = new PBEKeySpec(this.aesKey.value().toCharArray(), this.salt.getBytes(), 65536, 256);
            final SecretKey tmp = factory.generateSecret(spec);
            final SecretKeySpec secretKey = new SecretKeySpec(tmp.getEncoded(), "AES");

            final Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
            cipher.init(Cipher.DECRYPT_MODE, secretKey, ivspec);
            return cipher;
        } catch (Exception e) {
            throw new ConfigException("Error during Cipher initialization", e);
        }
    }

}
