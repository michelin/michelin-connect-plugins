/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.michelin.kafka.config.providers;

import org.apache.kafka.common.config.ConfigException;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.HashSet;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

class AES256ConfigProviderTest {
    @Test
    void DecryptFailure_NotBase64() {
        try (final var configProvider = new AES256ConfigProvider()) {
            final var configs = new HashMap<String, String>();
            configs.put("key", "key-aaaabbbbccccdddd");
            configs.put("salt", "salt-aaaabbbbccccdddd");
            configProvider.configure(configs);

            final var wrongKey = new HashSet<String>();
            wrongKey.add("does_not_match"); // secret can't be decoded
            assertThrows(ConfigException.class, () -> configProvider.get("", wrongKey));
        }
    }

    @Test
    void DecryptFailure_InvalidKey() {
        try (final var configProvider = new AES256ConfigProvider()) {
            final var configs = new HashMap<String, String>();
            configs.put("key", "key-aaaabbbbccccdddd");
            configs.put("salt", "salt-aaaabbbbccccdddd");
            configProvider.configure(configs);

            final var wrongKey = new HashSet<String>();
            wrongKey.add("mfw43l96122yZiDhu2RevQ=="); // secret can't be decoded
            assertThrows(ConfigException.class, () -> configProvider.get("", wrongKey));
        }
    }

    @Test
    void DecryptSuccess() {
        final var originalPassword = "hello !";
        final var encodedPassword = "hgkWF2Gp3qPxcPnVifDgJA==";
        try (final var configProvider = new AES256ConfigProvider()) {
            final var configs = new HashMap<String, String>();
            configs.put("key", "key-aaaabbbbccccdddd");
            configs.put("salt", "salt-aaaabbbbccccdddd");
            configProvider.configure(configs);

            // String encoded = AES256Helper.encrypt("aaaabbbbccccdddd",AES256ConfigProvider.DEFAULT_SALT, originalPassword);
            // System.out.println(encoded);

            final var rightKeys = new HashSet<String>();
            rightKeys.add(encodedPassword);

            assertEquals(originalPassword, configProvider.get("", rightKeys).data().get(encodedPassword));
        }
    }

    @Test
    void MissingConfig_key() {
        try (final var configProvider = new AES256ConfigProvider()) {
            final var configs = new HashMap<String, String>();
            configs.put("salt", "salt-aaaabbbbccccdddd");

            assertThrows(ConfigException.class, () -> configProvider.configure(configs));
        }
    }

    @Test
    void MissingConfig_salt() {
        try (final var configProvider = new AES256ConfigProvider()) {
            final var configs = new HashMap<String, String>();
            configs.put("key", "key-aaaabbbbccccdddd");

            assertThrows(ConfigException.class, () -> configProvider.configure(configs));
        }
    }
}
